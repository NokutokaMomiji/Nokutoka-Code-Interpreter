#ifndef MOMIJI_SCANNER_H
#define MOMIJI_SCANNER_H

#include "Chunk.h"

typedef enum {
    TOKEN_PARENTHESIS_OPEN,
    TOKEN_PARENTHESIS_CLOSE,
    TOKEN_BRACKET_OPEN,
    TOKEN_BRACKET_CLOSE,
    TOKEN_SQUARE_OPEN,
    TOKEN_SQUARE_CLOSE,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_COLON,
    TOKEN_SEMICOLON,
    TOKEN_PLUS,
    TOKEN_INCREASE,
    TOKEN_MINUS,
    TOKEN_DECREASE,
    TOKEN_STAR,
    TOKEN_SLASH,
    TOKEN_ASSIGN,
    TOKEN_EQUAL,
    TOKEN_ADD_EQUAL,
    TOKEN_SUB_EQUAL,
    TOKEN_MULT_EQUAL,
    TOKEN_DIV_EQUAL,
    TOKEN_NOT,
    TOKEN_NOT_EQUAL,
    TOKEN_GREATER,
    TOKEN_SMALLER,
    TOKEN_GREATER_EQ,
    TOKEN_SMALLER_EQ,
    TOKEN_MOD,
    TOKEN_BITWISE_OR,
    TOKEN_BITWISE_AND,
    TOKEN_XOR,
    TOKEN_IDENTIFIER,
    TOKEN_STRING,
    TOKEN_NUMBER,

    TOKEN_AND,
    TOKEN_OR,
    TOKEN_FUNCTION,
    TOKEN_CLASS,
    TOKEN_IF,
    TOKEN_ELSE,
    TOKEN_TRUE,
    TOKEN_FALSE,
    TOKEN_MAYBE,
    TOKEN_LOCAL,
    TOKEN_GLOBAL,
    TOKEN_STATIC,
    TOKEN_CONST,
    TOKEN_NULL,
    TOKEN_FOR,
    TOKEN_WHILE,
    TOKEN_CONTINUE,
    TOKEN_BREAK,
    TOKEN_CASE,
    TOKEN_DEFAULT,
    TOKEN_SWITCH,
    TOKEN_THIS,
    TOKEN_RETURN,
    TOKEN_PRINT,
    TOKEN_SUPER,
    TOKEN_IS,
    TOKEN_AS,
    TOKEN_AFTER,

    TOKEN_ERROR,
    TOKEN_EOF
} TokenType;

typedef struct {
    TokenType type;
    const char* start;
    int length;
    int line;
} Token;

void ScannerInit(const char* source);

char* ScannerGetSource();
Token ScannerScanToken();

#endif